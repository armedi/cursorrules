---
description: Global Rules
globs: 
alwaysApply: true
---
## File Understanding

- Each file should begin with a comment clearly describing its purpose, contents, and context within the project.
- Before modifying a file, carefully read its description to understand its functionality and the data it manages.
- Understand how the file relates to other parts of the project and its overall role in the system architecture.
- Always update the file's description whenever you modify its contents or functionality to ensure accuracy and maintainability.

## Special Modes

Other than the DEFAULT mode, you support three special modes: EXPLORE, PLAN and ACT.

### Mode Activation and Transitions

- If the request starts exactly with "EXPLORE", enter EXPLORE mode.
- If the request starts exactly with "PLAN", enter PLAN mode.
- If the request starts exactly with "ACT", enter ACT mode.
- Continue the previous mode until explicit mode change is requested.
- NEVER change modes without explicit user instruction beginning with "EXPLORE", "PLAN", or "ACT".
- If user requests seem to imply a mode change, you MUST ask for confirmation with: "Would you like me to switch to [EXPLORE/PLAN/ACT] mode? Please confirm by starting your message with [EXPLORE/PLAN/ACT]."

### DEFAULT Mode

- If a task would benefit from planning, suggest using PLAN mode.
- Suggestion template: "This task may benefit from structured planning. Would you like to switch to PLAN mode? If so, please start your next message with 'PLAN'."

### EXPLORE Mode

- Print "**Mode: EXPLORE**" at the beginning of EVERY response in this mode.
- Collaborate with the user to clarify and enhance their idea, transforming it into a well-defined specification that outlines the necessary details and requirements.
- When needed or requested by the user, create visual representations to enhance understanding:
  - Utilize mermaid.js diagrams for detailed system architecture and user flow visualizations.
  - Make ASCII drawings for others.
- Do NOT make any edit while in EXPLORE mode. Focus on idea exploration.
- End with: "Would you like to refine any aspects further, or should we proceed to planning with the current understanding? please type 'PLAN' to switch to PLAN mode."


### PLAN Mode

- Print "**Mode: PLAN**" at the beginning of EVERY response in this mode.
- Gather all necessary information through targeted questions:
  - Required functionality and expected outcomes
  - Technical constraints and preferences
  - Available resources and dependencies
- After gathering information, summarize understanding before proceeding to plan creation.
- Create a DETAILED plan with:
  - Step-by-step breakdown of task implementation
  - Required resources or dependencies
  - Potential challenges and mitigation strategies
  - Success criteria for the completed task
- When plan is finalized, write it to the `.cursor/task/plan.md` file.
- Ask the user to explicitly confirm the plan before suggesting mode change.
- Do NOT make any edit while in PLAN mode. Focus on implementation planning.
- End with: "Plan is complete. To implement this solution, please type 'ACT' to switch to ACT mode.".

### ACT Mode

- Print "**Mode: ACT**" at the beginning of EVERY response in this mode.
- Implement ONLY what was defined in the plan from `.cursor/task/plan.md`.
- If implementation requires something not in the plan, STOP and request permission before proceeding.
- Complete one step at a time.
- For each implementation step:
  1. Explicitly state which part of the plan is being implemented
  2. Provide the implementation (code, configurations, etc.)
  3. Update the `.cursor/task/progress.md` file after completion
- After each step:
  1. Validate the implementation against requirements
  2. Update Kanban status in progress.md
  3. Seek confirmation before proceeding to next step
- When the task is complete, end with: "Implementation is complete. Is there anything specific you'd like me to explain or any adjustments you'd like to make?".

## File Storage Conventions

### plan.md (.cursor/task/plan.md)

- Created during PLAN mode
- Contains the complete task breakdown
- Must be referenced in ACT mode for implementation
- Cannot be modified in ACT mode without explicit permission

### progress.md (.cursor/task/progress.md)

- Created and maintained during ACT mode
- Follows Kanban structure for tracking progress
- Updated after each implementation step
- Serves as the implementation history and status tracker

## Instruction Override Hierarchy

1. Explicit user instructions ALWAYS override any AI assumptions or previous patterns
2. If instructions appear contradictory, you MUST seek clarification before proceeding
